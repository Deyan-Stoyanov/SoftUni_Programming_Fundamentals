using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

class ConsoleApp1
{
   class Team
    {
        public string Name { get; set; }
        public string Creator { get; set; }
        public List<string> Members { get; set; }
    }
    static void Main()
    {
        List<Team> listOfTeams = new List<Team>();
        int n = int.Parse(Console.ReadLine());
        for (int i = 0; i < n; i++)
        {
            var teamAndCreator = Console.ReadLine().Split('-');
            Team team = new Team();
            team.Name = teamAndCreator[1];
            team.Creator = teamAndCreator[0];
            team.Members = new List<string>();
            if (listOfTeams.Any(x => x.Name == team.Name))
            {
                Console.WriteLine($"Team {team.Name} was already created!");
            }
            else if (listOfTeams.Any(x => x.Creator == team.Creator))
            {
                Console.WriteLine($"{team.Creator} cannot create another team!");
            }
            else
            {
                Console.WriteLine($"Team {team.Name} has been created by {team.Creator}!");
                listOfTeams.Add(team);
            }
        }
        string membersToAdd = Console.ReadLine();
        while (membersToAdd != "end of assignment")
        {
            var membersData = membersToAdd.Split(new string[] { "->" }, StringSplitOptions.RemoveEmptyEntries);
            if (!listOfTeams.Any(x => x.Name == membersData[1]))
            {
                Console.WriteLine($"Team {membersData[1]} does not exist!");
            }
            else if (listOfTeams.Any(x => x.Members.Contains(membersData[0])))
            {
                Console.WriteLine($"Member {membersData[0]} cannot join team {membersData[1]}!");
            }
            else if (listOfTeams.Any(x => x.Creator == membersData[0]))
            {
                Console.WriteLine($"Member {membersData[0]} cannot join team {membersData[1]}!");
            }
            else
            {
                foreach (var team in listOfTeams)
                {
                    if (team.Name == membersData[1])
                    {
                        if (team.Creator != membersData[0] && !team.Members.Contains(membersData[0]))
                        {
                            team.Members.Add(membersData[0]);
                        }
                        else
                        {
                            Console.WriteLine($"Member {membersData[0]} cannot join team {membersData[1]}!");
                        }
                    }
                }
            }
            membersToAdd = Console.ReadLine();
        }
        List<Team> teamsToRemove = new List<Team>();
        foreach (var team in listOfTeams)
        {
            if (team.Members.Count == 0)
            {
                teamsToRemove.Add(team);
            }
        }
        foreach (var removeTeam in teamsToRemove)
        {
            listOfTeams.Remove(removeTeam);
        }
        var orderedTeams = listOfTeams.OrderByDescending(x => x.Members.Count).ThenBy(x => x.Name);
        var orderedTeamsToRemove = teamsToRemove.OrderBy(x => x.Name);
        foreach (var validTeam in orderedTeams)
        {
            Console.WriteLine(validTeam.Name);
            Console.WriteLine($"- {validTeam.Creator}");
            var sortedMembers = validTeam.Members.OrderBy(x => x);
            foreach (var member in sortedMembers)
            {
                Console.WriteLine($"-- {member}");
            }
        }
        Console.WriteLine("Teams to disband:");
        foreach (var teamToDisband in orderedTeamsToRemove)
        {
            Console.WriteLine(teamToDisband.Name);
        }
    }
}