using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;

public class ConsoleApp1
{
    class Head
    {
        public int EnergyConsumption { get; set; }
        public int IQ { get; set; }
        public string SkinMaterial { get; set; }
    }
    class Torso
    {
        public int EnergyConsumption { get; set; }
        public double ProcessorSize { get; set; }
        public string Material { get; set; }
    }
    class Arm
    {
        public int EnergyConsumption { get; set; }
        public int ReachLength { get; set; }
        public int FingersCount { get; set; }
    }
    class Leg
    {
        public int EnergyConsumption { get; set; }
        public int Strength { get; set; }
        public int Speed { get; set; }
    }


    public static void Main()
    {
        long power = long.Parse(Console.ReadLine());

        Head head = new Head()
        {
            EnergyConsumption = int.MaxValue
        };
        Torso torso = new Torso()
        {
            EnergyConsumption = int.MaxValue
        };

        List<Arm> arms = new List<Arm>();
        List<Leg> legs = new List<Leg>();
        int headCounter = 0;
        int torsoCounter = 0;
        int armCounter = 0;
        int legCounter = 0;
        string command = Console.ReadLine();

        while (command != "Assemble!")
        {
            var inputData = command.Split();
            switch (inputData[0])
            {
                case "Head":
                    head = AddHead(inputData, head);
                    headCounter++;
                    break;
                case "Torso":
                    torso = AddTorso(inputData, torso);
                    torsoCounter++;
                    break;
                case "Arm":
                    arms = AddArm(inputData, arms);
                    armCounter++;
                    break;
                case "Leg":
                    legs = AddLeg(inputData, legs);
                    legCounter++;
                    break;
                default:
                    break;
            }
            command = Console.ReadLine();
        }

        long sumOfEnergy = SumEnergy(head, torso, legs, arms);
        if (headCounter < 1 || torsoCounter < 1 || legCounter < 2 || armCounter < 2)
        {
            Console.WriteLine($"We need more parts!");
        }
        else if (sumOfEnergy > power)
        {
            Console.WriteLine($"We need more power!");
        }
        else
        {
            PrintJarvis(arms, legs, head, torso);
        }
    }


    static void PrintJarvis(List<Arm> arms, List<Leg> legs, Head head, Torso torso)
    {
        var orderedArms = arms.OrderBy(x => x.EnergyConsumption);
        var orderedLegs = legs.OrderBy(x => x.EnergyConsumption);
        Console.WriteLine("Jarvis:");
        Console.WriteLine("#Head:");
        Console.WriteLine($"###Energy consumption: {head.EnergyConsumption}");
        Console.WriteLine($"###IQ: {head.IQ}");
        Console.WriteLine($"###Skin material: {head.SkinMaterial}");
        Console.WriteLine("#Torso:");
        Console.WriteLine($"###Energy consumption: {torso.EnergyConsumption}");
        Console.WriteLine($"###Processor size: {torso.ProcessorSize:F1}");
        Console.WriteLine($"###Corpus material: {torso.Material}");
        foreach (var arm in orderedArms)
        {
            Console.WriteLine($"#Arm:");
            Console.WriteLine($"###Energy consumption: {arm.EnergyConsumption}");
            Console.WriteLine($"###Reach: {arm.ReachLength}");
            Console.WriteLine($"###Fingers: {arm.FingersCount}");
        }
        foreach (var leg in orderedLegs)
        {
            Console.WriteLine($"Leg:");
            Console.WriteLine($"###Energy consumption: {leg.EnergyConsumption}");
            Console.WriteLine($"###Strength: {leg.Strength}");
            Console.WriteLine($"###Speed: {leg.Speed}");
        }
    }

    static long SumEnergy(Head head, Torso torso, List<Leg> legs, List<Arm> arms)
    {
        long sum = 0;
        sum += head.EnergyConsumption;
        sum += torso.EnergyConsumption;
        foreach (var arm in arms)
        {
            sum += arm.EnergyConsumption;
        }
        foreach (var leg in legs)
        {
            sum += leg.EnergyConsumption;
        }
        return sum;
    }

    static List<Leg> AddLeg(string[] inputData, List<Leg> legs)
    {
        Leg newLeg = new Leg()
        {
            EnergyConsumption = int.Parse(inputData[1]),
            Strength = int.Parse(inputData[2]),
            Speed = int.Parse(inputData[3])
        };
        if (legs.Count < 2)
        {
            legs.Add(newLeg);
        }
        else
        {
            foreach (var  oldLeg in legs)
            {
                if (oldLeg.EnergyConsumption > newLeg.EnergyConsumption)
                {
                    legs.Remove(oldLeg);
                    legs.Add(newLeg);
                    break;
                }
            }
        }
        return legs;
    }

    static List<Arm> AddArm(string[] inputData, List<Arm> arms)
    {
        Arm newArm = new Arm()
        {
            EnergyConsumption = int.Parse(inputData[1]),
            ReachLength = int.Parse(inputData[2]),
            FingersCount = int.Parse(inputData[3])
        };
        if (arms.Count < 2)
        {
            arms.Add(newArm);
        }
        else
        {
            foreach (var oldArm in arms)
            {
                if (oldArm.EnergyConsumption > newArm.EnergyConsumption)
                {
                    arms.Remove(oldArm);
                    arms.Add(newArm);
                    break;
                }
            }
        }
        return arms;
    }

    static Torso AddTorso(string[] inputData, Torso torso)
    {
        Torso newTorso = new Torso()
        {
            EnergyConsumption = int.Parse(inputData[1]),
            ProcessorSize = double.Parse(inputData[2]),
            Material = inputData[3]
        };
        if (newTorso.EnergyConsumption < torso.EnergyConsumption)
        {
            torso = newTorso;
        }
        return torso;
    }

    static Head AddHead(string[] inputData, Head head)
    {
        Head newHead = new Head()
        {
            EnergyConsumption = int.Parse(inputData[1]),
            IQ = int.Parse(inputData[2]),
            SkinMaterial = inputData[3]
        };
        if (newHead.EnergyConsumption < head.EnergyConsumption)
        {
            head = newHead;
        }
        return head;
    }
}